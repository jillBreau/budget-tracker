{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Layout","Footer","Sider","Content","Option","Select","turquoises","generate","App","useState","netVal","setNetVal","style","position","zIndex","width","backgroundColor","color","padding","marginTop","minHeight","name","onFinish","values","earnings","key","entry","undefined","period","amount","console","log","autoComplete","List","fields","add","remove","map","field","display","marginBottom","align","placeholder","Item","fieldKey","rules","required","message","formatter","value","defaultValue","MinusCircleOutlined","onClick","type","block","PlusOutlined","htmlType","title","valueStyle","precision","bottom","left","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.117263e7.chunk.js","sourcesContent":["import React, { FC, useState, Dispatch, SetStateAction } from 'react';\nimport './App.css';\n\nimport { Layout, Form, Input, Button, Space, InputNumber, Select, Statistic } from 'antd';\nimport { generate } from '@ant-design/colors';\nimport {  MinusCircleOutlined, PlusOutlined  } from '@ant-design/icons';\nimport { Store } from 'antd/lib/form/interface';\nconst { Header, Footer, Sider, Content } = Layout;\nconst { Option } = Select;\n\nconst turquoises : string[] = generate('#7af0d2');\n\nconst App: FC = () => {\n\n  const [netVal, setNetVal] : [number, Dispatch<SetStateAction<number>>] = useState(0);\n\n  const onFinish = (values: Store) => {\n\n    let earnings : number = 0;\n\n    for (const key in values) {\n      for (const entry in values[key]) {\n        if (values[key][entry].period === undefined) {\n          values[key][entry].period = \"Monthly\";\n        }\n\n        let amount;\n\n        if (values[key][entry].period === \"Hourly\") {\n\n          amount = values[key][entry].amount * 8 * 5 * 52.143;\n\n        } else if (values[key][entry].period === \"Daily5\") {\n\n          amount = values[key][entry].amount * 5 * 52.143;\n\n        } else if (values[key][entry].period === \"Daily7\") {\n\n          amount = values[key][entry].amount * 365;\n\n        } else if (values[key][entry].period === \"Weekly\") {\n\n          amount = values[key][entry].amount * 52.143;\n\n        } else if (values[key][entry].period === \"BiWeekly\") {\n\n          amount = values[key][entry].amount * 52.143 / 2;\n\n        } else if (values[key][entry].period === \"Monthly\") {\n\n          amount = values[key][entry].amount * 12;\n\n        } else if (values[key][entry].period === \"Annually\") {\n\n          amount = values[key][entry].amount;\n\n        }\n\n        if (key == \"income\") {\n          earnings += amount;\n        } else {\n          earnings -= amount;\n        }\n      }\n    }\n\n    console.log('Received values of form:', values);\n    setNetVal(earnings);\n\n  };\n\n  return (\n    <Layout>\n      <Header \n        style={\n          { position: 'fixed',\n            zIndex: 1,\n            width: '100%',\n            backgroundColor: turquoises[7] }\n        }\n      >\n        <h1 style={{color: turquoises[0]}}>Budget Tracker</h1>\n      </Header>\n      <Layout>\n        <Content\n          style={\n            { padding: '20px 50px',\n              marginTop: 64,\n              minHeight: 1000,\n              backgroundColor: turquoises[1],\n              color: turquoises[9] }\n          }\n        >\n          Track your income and expenses to determine your net earnings.\n          <br></br>\n          <br></br>\n          <Form name=\"dynamic_budget\" onFinish={onFinish} autoComplete=\"off\">\n            <Form.List name=\"income\">\n              {(fields, { add, remove }) => {\n                return (\n                  <div>\n                    {fields.map(field => (\n                      <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\n                        Income\n                        <Input \n                            style={{\n                              width: '100%'\n                            }}\n                            placeholder=\"Name of income\"/>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'amount']}\n                          fieldKey={[field.fieldKey, 'amount']}\n                          rules={[{ required: true, message: 'Missing income amount' }]}\n                        >\n                          <InputNumber \n                            style={{\n                              width: '100%'\n                            }}\n                            placeholder=\"Income Amount\"\n                            formatter={value => `$${value}`} />\n                        </Form.Item>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'period']}\n                          fieldKey={[field.fieldKey, 'period']}\n                        >\n                          <Select\n                            style={{\n                              width: '100%'\n                            }}\n                            defaultValue=\"Monthly\">\n                            <Option value=\"Hourly\">Hourly</Option>\n                            <Option value=\"Daily5\">Weekdays</Option>\n                            <Option value=\"Daily7\">Daily</Option>\n                            <Option value=\"Weekly\">Weekly</Option>\n                            <Option value=\"BiWeekly\">Bi-Weekly</Option>\n                            <Option value=\"Monthly\">Monthly</Option>\n                            <Option value=\"Annually\">Annually</Option>\n                          </Select>\n                        </Form.Item>\n                        <MinusCircleOutlined\n                          onClick={() => {\n                            remove(field.name);\n                          }}\n                        />\n                      </Space>\n                    ))}\n\n                    <Form.Item>\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                          add();\n                        }}\n                        block\n                      >\n                        <PlusOutlined /> Add a source of income\n                      </Button>\n                    </Form.Item>\n                  </div>\n                );\n              }}\n            </Form.List>\n\n            <Form.List name=\"expenses\">\n              {(fields, { add, remove }) => {\n                return (\n                  <div>\n                    {fields.map(field => (\n                      <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\n                        Expense\n                        <Input \n                            style={{\n                              width: '100%'\n                            }}\n                            placeholder=\"Name of expense\"/>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'amount']}\n                          fieldKey={[field.fieldKey, 'amount']}\n                          rules={[{ required: true, message: 'Missing expense amount' }]}\n                        >\n                          <InputNumber \n                            style={{\n                              width: '100%'\n                            }}\n                            placeholder=\"Expense Amount\"\n                            formatter={value => `$${value}`} />\n                        </Form.Item>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'period']}\n                          fieldKey={[field.fieldKey, 'period']}\n                        >\n                          <Select\n                            style={{\n                              width: '100%'\n                            }}\n                            defaultValue=\"Monthly\">\n                            <Option value=\"Daily5\">Weekdays</Option>\n                            <Option value=\"Daily7\">Daily</Option>\n                            <Option value=\"Weekly\">Weekly</Option>\n                            <Option value=\"BiWeekly\">Bi-Weekly</Option>\n                            <Option value=\"Monthly\">Monthly</Option>\n                            <Option value=\"Annually\">Annually</Option>\n                          </Select>\n                        </Form.Item>\n                        <MinusCircleOutlined\n                          onClick={() => {\n                            remove(field.name);\n                          }}\n                        />\n                      </Space>\n                    ))}\n\n                    <Form.Item>\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                          add();\n                        }}\n                        block\n                      >\n                        <PlusOutlined /> Add an expense\n                      </Button>\n                    </Form.Item>\n                  </div>\n                );\n              }}\n            </Form.List>\n\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n              </Button>\n            </Form.Item>\n          </Form>\n        </Content>\n        <Sider \n          style={\n            { padding: '20px',\n            marginTop: 64,\n            minHeight: 1000,\n            backgroundColor: turquoises[4],\n            color: turquoises[9] }\n          }\n        >\n          {\n            (netVal >= 0) ? (\n              <Statistic \n                title=\"Your net annual earnings ($)\" \n                value={netVal} \n                valueStyle={{color: 'green'}} \n                precision={2}\n              />\n            ) : (\n              <Statistic \n                title=\"Your net annual earnings ($)\" \n                value={netVal} \n                valueStyle={{color: 'red'}} \n                precision={2}\n              />\n            )\n          }\n        </Sider>\n      </Layout>\n      <Footer \n        style={\n          { position: \"fixed\",\n            bottom: \"0\",\n            left: \"0\",\n            width: '100%',\n            backgroundColor: turquoises[7],\n            color: turquoises[0] }\n        }\n      >\n        * Hourly income is based on a 40-hour work week *\n      </Footer>\n    </Layout>\n    \n  )\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}