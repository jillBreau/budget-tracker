{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Layout","Footer","Sider","Content","Option","Select","turquoises","generate","App","useState","netVal","setNetVal","netDisplay","setNetDisplay","hours","setHours","formVals","setFormVals","csvData","setCsvData","onFinish","values","balance","key","entry","undefined","period","amount","amountObj","createObj","name","balanceObj","type","style","position","zIndex","width","backgroundColor","color","DollarCircleOutlined","padding","marginTop","minHeight","title","value","valueStyle","precision","onChange","val","defaultValue","autoComplete","List","fields","add","remove","Item","onClick","PlusOutlined","map","field","display","marginBottom","align","fontWeight","UpOutlined","fieldKey","placeholder","rules","required","message","formatter","MinusCircleOutlined","DownOutlined","htmlType","size","shape","filename","data","DownloadOutlined","bottom","left","fontSize","min","max","step","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.208dacb2.chunk.js","sourcesContent":["import React, { FC, useState, Dispatch, SetStateAction } from 'react';\nimport { CSVLink } from 'react-csv';\nimport './App.css';\n\nimport { Layout, Form, Input, Button, Space, InputNumber, Select, Statistic } from 'antd';\nimport { generate } from '@ant-design/colors';\nimport {  MinusCircleOutlined, PlusOutlined, UpOutlined, DownOutlined, DownloadOutlined, DollarCircleOutlined } from '@ant-design/icons';\nimport { Store } from 'antd/lib/form/interface';\nconst { Header, Footer, Sider, Content } = Layout;\nconst { Option } = Select;\n\nconst turquoises : string[] = generate('#7af0d2');\n\nconst App: FC = () => {\n\n  const [netVal, setNetVal] : [any, Dispatch<SetStateAction<any>>] = useState({\"Monthly\": 0});\n  const [netDisplay, setNetDisplay] : [string, Dispatch<SetStateAction<string>>] = useState(\"Monthly\");\n  const [hours, setHours] : [number, Dispatch<SetStateAction<number>>] = useState(40);\n  const [formVals, setFormVals] : [any, Dispatch<SetStateAction<any>>] = useState({});\n  const [csvData, setCsvData] : [any, Dispatch<SetStateAction<any>>] = useState([]);\n\n  const onFinish = (values: Store) => {\n\n    setFormVals(values);\n    setCsvData((csvData: any) => []);\n    let balance : number = 0;\n\n    for (const key in values) {\n      for (const entry in values[key]) {\n        if (values[key][entry].period === undefined) {\n          values[key][entry].period = \"Monthly\";\n        }\n\n        let amount;\n\n        if (values[key][entry].period === \"Hourly\") {\n\n          amount = values[key][entry].amount * hours * 52.143;\n        \n        } else if (values[key][entry].period === \"PerWeekday\") {\n\n          amount = values[key][entry].amount * 5 * 52.143;\n\n        } else if (values[key][entry].period === \"Daily\") {\n\n          amount = values[key][entry].amount * 365;\n\n        } else if (values[key][entry].period === \"Weekly\") {\n\n          amount = values[key][entry].amount * 52.143;\n\n        } else if (values[key][entry].period === \"BiWeekly\") {\n\n          amount = values[key][entry].amount * 52.143 / 2;\n\n        } else if (values[key][entry].period === \"Monthly\") {\n\n          amount = values[key][entry].amount * 12;\n\n        } else if (values[key][entry].period === \"Annually\") {\n\n          amount = values[key][entry].amount;\n\n        }\n\n        const amountObj = createObj(amount, key, values[key][entry].name);\n        setCsvData((csvData: any) => [...csvData, amountObj]);\n\n        if (key === \"Income\") {\n          balance += amount;\n        } else {\n          balance -= amount;\n        }\n      }\n    }\n\n    const balanceObj = createObj(balance, \"Balance\", \"NET\");\n    setCsvData((csvData: any) => [...csvData, balanceObj]);\n    setNetVal(balanceObj);\n\n  };\n\n  const OnChangeHours = (value: any) => {\n\n    if (value === undefined) {\n      value = 40;\n    }\n\n    setHours(value);\n    onFinish(formVals);\n\n  }\n\n  const createObj = (amount: number, type: string, name: string) : any => {\n\n    const amountObj = {\n      \"Type\": type,\n      \"Name\": name,\n      \"Hourly\": amount / (hours * 52.143),\n      \"PerWeekday\": amount / (5 * 52.143),\n      \"Daily\": amount / (365),\n      \"Weekly\": amount / (52.143),\n      \"BiWeekly\": amount / (52.143 / 2),\n      \"Monthly\": amount / (12),\n      \"Annually\": amount\n    };\n\n    return amountObj;\n\n  }\n\n  return (\n    <Layout>\n      <Header \n        style={\n          { \n            position: 'fixed',\n            zIndex: 1,\n            width: '100%',\n            backgroundColor: turquoises[7] \n          }\n        }\n      >\n        <h1 style={{color: turquoises[0]}}>\n          <DollarCircleOutlined /> Budget Tracker\n        </h1>\n      </Header>\n      <Layout>\n      <Sider \n          style={\n            { \n              padding: '20px',\n              marginTop: 64,\n              minHeight: 1000,\n              backgroundColor: turquoises[4] \n            }\n          }\n        >\n          {\n            (netVal[netDisplay] && netVal[netDisplay] < 0) ? (\n              <Statistic \n                title=\"Your net balance ($)\" \n                value={netVal[netDisplay]} \n                valueStyle={{color: 'red'}} \n                precision={2}\n              />\n            ) : (\n              <Statistic \n                title=\"Your net balance ($)\" \n                value={netVal[netDisplay]} \n                valueStyle={{color: 'green'}} \n                precision={2}\n              />\n            )\n          }\n          <Select\n            style={{width: '100%'}}\n            onChange={val => setNetDisplay(val)}\n            defaultValue=\"Monthly\">\n            <Option value=\"Hourly\">Hourly</Option>\n            <Option value=\"PerWeekday\">Weekdays</Option>\n            <Option value=\"Daily\">Daily</Option>\n            <Option value=\"Weekly\">Weekly</Option>\n            <Option value=\"BiWeekly\">Bi-Weekly</Option>\n            <Option value=\"Monthly\">Monthly</Option>\n            <Option value=\"Annually\">Annually</Option>\n          </Select>\n        </Sider>\n        <Content\n          style={\n            { \n              padding: '20px 50px',\n              marginTop: 64,\n              minHeight: 1000,\n              backgroundColor: turquoises[1],\n              color: turquoises[9] \n            }\n          }\n        >\n          Track your income and expenses to determine your net balance.\n          <br></br>\n          <br></br>\n          <Form name=\"dynamic_budget\" onFinish={onFinish} autoComplete=\"off\">\n            <Form.List name=\"Income\">\n              {(fields, { add, remove }) => {\n                return (\n                  <div>\n                    <Form.Item>\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                          add();\n                        }}\n                      >\n                        <PlusOutlined /> Add a source of income\n                      </Button>\n                    </Form.Item>\n                    {fields.map(field => (\n                      <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\n                        <span style={{color: 'green', fontWeight: 'bold'}}><UpOutlined /> Income</span>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'name']}\n                          fieldKey={[field.fieldKey, 'name']}\n                        >\n                          <Input \n                              style={{width: '100%'}}\n                              placeholder=\"Name of income\"/>\n                        </Form.Item>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'amount']}\n                          fieldKey={[field.fieldKey, 'amount']}\n                          rules={[{ required: true, message: 'Missing income amount' }]}\n                        >\n                          <InputNumber \n                            style={{width: '100%'}}\n                            placeholder=\"Income Amount\"\n                            formatter={value => `$${value}`} />\n                        </Form.Item>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'period']}\n                          fieldKey={[field.fieldKey, 'period']}\n                        >\n                          <Select\n                            style={{width: '100%'}}\n                            defaultValue=\"Monthly\">\n                            <Option value=\"Hourly\">Hourly</Option>\n                            <Option value=\"PerWeekday\">Weekdays</Option>\n                            <Option value=\"Daily\">Daily</Option>\n                            <Option value=\"Weekly\">Weekly</Option>\n                            <Option value=\"BiWeekly\">Bi-Weekly</Option>\n                            <Option value=\"Monthly\">Monthly</Option>\n                            <Option value=\"Annually\">Annually</Option>\n                          </Select>\n                        </Form.Item>\n                        <MinusCircleOutlined\n                          onClick={() => {\n                            remove(field.name);\n                          }}\n                        />\n                      </Space>\n                    ))}\n                  </div>\n                );\n              }}\n            </Form.List>\n\n            <Form.List name=\"Expense\">\n              {(fields, { add, remove }) => {\n                return (\n                  <div>\n                    <Form.Item>\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                          add();\n                        }}\n                      >\n                        <PlusOutlined /> Add an expense\n                      </Button>\n                    </Form.Item>\n                    {fields.map(field => (\n                      <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\n                        <span style={{color: 'red', fontWeight: 'bold'}}><DownOutlined /> Expense</span>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'name']}\n                          fieldKey={[field.fieldKey, 'name']}\n                        >\n                          <Input \n                              style={{width: '100%'}}\n                              placeholder=\"Name of expense\"/>\n                        </Form.Item>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'amount']}\n                          fieldKey={[field.fieldKey, 'amount']}\n                          rules={[{ required: true, message: 'Missing expense amount' }]}\n                        >\n                          <InputNumber \n                            style={{width: '100%'}}\n                            placeholder=\"Expense Amount\"\n                            formatter={value => `$${value}`} />\n                        </Form.Item>\n                        <Form.Item\n                          {...field}\n                          name={[field.name, 'period']}\n                          fieldKey={[field.fieldKey, 'period']}\n                        >\n                          <Select\n                            style={{width: '100%'}}\n                            defaultValue=\"Monthly\">\n                            <Option value=\"PerWeekday\">Weekdays</Option>\n                            <Option value=\"Daily\">Daily</Option>\n                            <Option value=\"Weekly\">Weekly</Option>\n                            <Option value=\"BiWeekly\">Bi-Weekly</Option>\n                            <Option value=\"Monthly\">Monthly</Option>\n                            <Option value=\"Annually\">Annually</Option>\n                          </Select>\n                        </Form.Item>\n                        <MinusCircleOutlined\n                          onClick={() => {\n                            remove(field.name);\n                          }}\n                        />\n                      </Space>\n                    ))}\n                  </div>\n                );\n              }}\n            </Form.List>\n\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                Submit\n              </Button>\n              <br></br>\n              <br></br>\n            </Form.Item>\n            <Button shape=\"round\">\n              <CSVLink filename={\"budget.csv\"} data={csvData}>\n                <DownloadOutlined /> Download your budget data as a spreadsheet (.csv)\n              </CSVLink>\n            </Button>\n\n          </Form>\n        </Content>\n      </Layout>\n      <Footer \n        style={\n          { \n            position: \"fixed\",\n            bottom: \"0\",\n            left: \"0\",\n            width: '100%',\n            backgroundColor: turquoises[7],\n            color: turquoises[0] \n          }\n        }\n      >\n        <span style={{ fontSize: '16px'}}>* Hourly income is based on a </span>\n        <InputNumber \n          min={0.5} \n          max={168} \n          defaultValue={40} \n          step={0.5}\n          value={hours}\n          onChange={OnChangeHours}\n          size=\"small\" \n          style={{ width: '65px' }} \n        />\n        <span style={{ fontSize: '16px'}}> hour work week *</span>\n      </Footer>\n    </Layout>\n    \n  )\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}